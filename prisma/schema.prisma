generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id   Int      @id @default(autoincrement())
  role UserRole @default(USER)

  firstName String  @db.VarChar(64)
  lastName  String  @db.VarChar(64)
  email     String  @unique
  username  String  @unique
  photo     String?
  password  String

  chats         Chat[]
  conversations Conversation[]

  resetPasswordToken String?
  verificationToken  String?

  isActive   Boolean @default(true)
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailOtp {
  id      Int    @id @default(autoincrement())
  email   String @unique
  otp     String
  expires Int

  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
}

model Views {
  id         Int    @id @default(autoincrement())
  count      Int
  lastViewAt String
}

model Chat {
  id     Int    @id @default(autoincrement())
  userId Int
  title  String

  conversations Conversation[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ConversationRole {
  USER
  ASSISTANT
  SYSTEM
}

model Conversation {
  id Int @id @default(autoincrement())

  userId  Int
  chatId  Int
  role    ConversationRole
  content String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
}
